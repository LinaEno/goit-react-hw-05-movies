{"version":3,"file":"static/js/736.c8bb9184.chunk.js","mappings":"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","sources":["Services/MovieApi.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.styled.jsx"],"sourcesContent":["import axios from 'axios';\nimport defaultImg from '../img/zaglushka.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '2963fc82afd3cb57f64d050a1ba5935c';\n\nexport async function getPopularFilms() {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const { data } = await axios.get('/trending/movie/day', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport async function getSearchFilms(query) {\n  const params = {\n    query,\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const movies = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return movies;\n}\n\nexport async function getFilmsById(id) {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const { data } = await axios.get(`/movie/${id}`, { params });\n  const {\n    poster_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n  return {\n    poster_path: getPoster(poster_path),\n    original_title,\n    release_date: release_date.slice(0, 4),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(({ name }) => name).join(', '),\n  };\n}\n\nexport async function getCreditsById(id) {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const { data } = await axios.get(`/movie/${id}/credits`, { params });\n  const credits = data.cast.map(({ id, name, profile_path }) => ({\n    id,\n    name,\n    profile_path: getPoster(profile_path),\n  }));\n  return credits;\n}\n\nexport async function getReviewsById(id) {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const { data } = await axios.get(`/movie/${id}/reviews`, { params });\n  const reviews = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n  return reviews;\n}\n\nconst getPoster = url =>\n  url ? 'https://image.tmdb.org/t/p/w500' + url : defaultImg;\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0;\n  padding: 0;\n  margin-top: 30px;\n`;\n\nexport const CastItem = styled.li`\n  border: 1px solid #000;\n  width: 300px;\n  height: auto;\n  margin-bottom: 30px;\n  scale: 1;\n  &:not(:nth-child(4n)) {\n    margin-right: 15px;\n  }\n\n  & > p {\n    font-size: 24px;\n    font-weight: 500;\n    margin: 15px 0;\n    text-align: center;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCreditsById } from 'Services/MovieApi';\nimport { InfinitySpin } from 'react-loader-spinner';\nimport { CastList, CastItem } from './Cast.styled';\nimport { Notification } from '../Reviews/Reviews.styled';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!movieId) return;\n    const getCredits = async movieId => {\n      try {\n        setLoading(true);\n        const credits = await getCreditsById(movieId);\n        setCredits(credits);\n        setError('');\n      } catch (error) {\n        setError('Oops. Something went wrong ðŸ˜­');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCredits(movieId);\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n    }\n  }, [error]);\n\n  return (\n    <>\n      {credits.length === 0 && !loading && !error && (\n        <Notification>We don't have info about casts</Notification>\n      )}\n      {credits && !loading && !error && (\n        <CastList>\n          {credits.map(({ id, name, profile_path }) => {\n            return (\n              <CastItem key={id}>\n                <img src={profile_path} alt={name} width=\"300\" />\n                <p>{name}</p>\n              </CastItem>\n            );\n          })}\n        </CastList>\n      )}\n      {loading && !error && <InfinitySpin width=\"200\" color=\"#4fa94d\" />}\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={5000}\n        closeOnClick\n        theme=\"colored\"\n      />\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Author = styled.p`\n  font-size: 24px;\n  font-weight: 500;\n`;\n\nexport const Content = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const Notification = styled.p`\n  font-size: 24px;\n  line-height: 1.5;\n  font-style: italic;\n  margin-bottom: 30px;\n`;\n"],"names":["axios","API_KEY","getPopularFilms","params","api_key","language","include_adult","data","movies","results","map","id","original_title","getSearchFilms","query","getFilmsById","poster_path","release_date","vote_average","overview","genres","getPoster","slice","toFixed","name","join","getCreditsById","credits","cast","profile_path","getReviewsById","reviews","author","content","url","defaultImg","CastList","styled","CastItem","useState","setCredits","loading","setLoading","movieId","useParams","error","setError","useEffect","getCredits","toast","length","src","alt","width","color","position","autoClose","closeOnClick","theme","Author","Content","Notification"],"sourceRoot":""}